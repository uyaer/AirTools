<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="462" height="300" initialize="init(event)">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			private var inURL:String;
			private var exportURL:String;
			//前缀
			private var prefix:String = "";
			//精度
			private var isDot:Boolean ;
			//过滤key
			private var isFilter:Boolean ;
			private var filterStr:String = "";
			private var isToJs:Boolean ;
			protected function init(event:FlexEvent):void
			{
				this.loadCfg();				
			}
			private function loadCfg():void
			{
				var share:SharedObject = SharedObject.getLocal("merger-json-file_path");
				inURL = share.data.in_path;
				exportURL = share.data.out_path;
				prefix = share.data.prefix || "";
				isDot = share.data.isDot || true;
				isFilter = share.data.isFilter || false;
				filterStr = share.data.filterStr || "";
				isToJs = share.data.isToJs || false;
				
				this.debugShow();
				
				share.close();
			}
			
			private function saveCfg():void
			{
				var share:SharedObject = SharedObject.getLocal("merger-json-file_path");
				share.data.in_path = inURL;
				share.data.out_path = exportURL; 
				share.data.prefix = prefix; 
				share.data.isDot = isDot; 
				share.data.isFilter = isFilter; 
				share.data.filterStr = filterStr; 
				share.data.isToJs = isToJs; 
				
				share.flush();
				share.close();
			}
			
			private function debugShow():void
			{
				stateTF.text = "in: "+this.inURL;
				stateTF.text += "\nout: "+exportURL;
				prefixInp.text = this.prefix;
				dotChk.selected = this.isDot;
				filterChk.selected = this.isFilter;
				filterInp.text = this.filterStr;
				toJsChk.selected = this.isToJs;
			}
			protected function selectBtn_clickHandler(e:MouseEvent):void
			{
				var file:File = new File(inURL);
				file.addEventListener(Event.SELECT,onSelect);
				file.browseForDirectory("选择打包文件");
			}
			
			private function onSelect(e:Event):void{
				var file:File = e.currentTarget as File;
				this.inURL = file.nativePath;
				this.saveCfg();
				this.debugShow();
			}
			
			private function onExportSelect(e:Event):void
			{
				var f:File = e.currentTarget as File;
				exportURL = f.nativePath;
				this.prefix = this.prefixInp.text;
				this.isDot = this.dotChk.selected;
				this.isFilter = this.filterChk.selected;
				this.filterStr = this.filterInp.text;
				this.isToJs = this.toJsChk.selected;
				this.saveCfg();
				this.debugShow();
				
				var outFile:File = new File(exportURL);
				var file:File = new File(inURL);
				var files:Array = file.getDirectoryListing();
				var jsonObj:Object = {};
				var jsonObjStr:String = "{";
				var stream:FileStream = new FileStream();
				for (var i:int = 0; i < files.length; i++) 
				{
					file = files[i];
					if(!file.isDirectory && !file.isHidden && file.extension == "json"){
						stream.open(file,FileMode.READ);
						var dataStr:String = stream.readUTFBytes(file.size);
						stream.close();
						if(!dataStr){
							continue;
						}
						var tableName:String = (this.prefix||"")+file.name.replace(".json","");
						
						var jsonData:Object = JSON.parse(dataStr);
						if(this.isFilter && this.filterStr){
							this.filter(jsonData);
						}
						if(this.isToJs){
							var objStr:String = JSON.stringify(jsonData).replace(/\{"/g , '{').replace(/\,"/g , ',').replace(/"\:/g , ':');
							jsonObjStr = jsonObjStr+ '"' + tableName + '":' + objStr + ',';
						}else{
							jsonObj[tableName] = jsonData;
						}
					}
				}
				
				//	写入			
				stream.open(outFile,FileMode.WRITE);
				if(this.isToJs){
					if(jsonObjStr.lastIndexOf(",")==jsonObjStr.length-1){
						jsonObjStr = jsonObjStr.substr(0,jsonObjStr.length-1)+"}";
					}
					var varname:String = f.name.substr(0,f.name.indexOf("."));
					stream.writeMultiByte("var "+varname+" = "+jsonObjStr,"utf-8");
				}else{
					stream.writeMultiByte(JSON.stringify(jsonObj),"utf-8");
				}
				stream.close();
				
				Alert.show("打包成功！","",4,this);
			}
			
			protected function mergeBtn_clickHandler(e:MouseEvent):void
			{
				if(!inURL){
					Alert.show("没有选择输入目录","",4,this);
					return;
				}
				var file:File= new File(exportURL);
				file.addEventListener(Event.SELECT,onExportSelect);
				file.browseForSave("保存合并后的文件");
			}
			
			/**
			 * 过滤key
			 */ 
			private function filter(pJsonData:Object,pkey:String=null):void
			{
				var jsonData:Object = pJsonData;
				if(pkey){
					jsonData = jsonData[pkey];
				}
				var filterKeyArr:Array = this.filterStr.split(";");
				for(var key:String in jsonData){
					var obj:* = jsonData[key];
					
					if(filterKeyArr.indexOf(key)==-1){
						if(obj is Array){
							if(obj.length==0){
								delete jsonData[key];
							}else{
								this.filter(jsonData,key);
							}
						}else if(this.isObj(obj)){
							this.filter(jsonData,key);
						}else{
							delete jsonData[key];
						}
					}else{ //找到了过滤元素
						if(this.isDot && obj is Number){ //是否过滤精度
							jsonData[key] = Math.round(obj);
						}
						if(!obj&& !(obj is Number)){
							delete jsonData[key];
						}
					}
				}
				
				//将没有子元素的对象删除
				if(pkey){
					var count:Number = 0;
					for(key in jsonData){
						count++;
						break;
					}
					if(count==0){
						delete pJsonData[pkey];
					}
				}
			}
			
			private function isObj(val:*):Boolean{
				if(val is Number)return false;
				if(val is String)return false;
				return true;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Button id="selectDestBtn" x="29" y="27" height="26" label="选择文件目录"
			  click="selectBtn_clickHandler(event)"/>
	<s:Button id="mergeBtn" x="135" y="173" width="78" height="27" label="合并"
			  click="mergeBtn_clickHandler(event)"/>
	<s:TextArea id="stateTF" x="28" y="66" width="244" height="78"/>
	<s:Label x="293" y="28" fontSize="14" text="每个JSON文件添加前缀"/>
	<s:TextInput id="prefixInp" x="293" y="46" text=""/>
	<s:CheckBox id="filterChk" x="293" y="80" fontSize="14"/>
	<s:CheckBox id="dotChk" x="293" y="140" fontSize="14"/>
	<s:CheckBox id="toJsChk" x="293" y="170" fontSize="14"/>
	<s:Label x="315" y="173" fontSize="14" text="保存为js"/>
	<s:Label x="315" y="84" fontSize="14" text="过滤key(;分割)"/>
	<s:Label x="315" y="143" fontSize="14" text="数字是否保留精度"/>
	<s:TextInput id="filterInp" x="293" y="106" text=""/>
</s:Group>
